{"version":3,"sources":["styles/global.js","helpers/random-flag.js","components/Logo.js","components/HeroImage.js","components/ContentContainer.js","components/Subtitle.js","components/Flag.js","App.js","serviceWorker.js","index.js"],"names":["createGlobalStyle","flagNames","Object","keys","flags","flagName","Math","floor","random","length","buildFlag","flag","opacity","logoText","split","Container","styled","div","LogoText","LogoLetter","span","props","color","LogoCaption","Logo","map","letter","index","inclusivePride","key","background","HeroImage","useState","randomFlag","setFlag","useEffect","changeFlag","window","setInterval","clearInterval","ContentContainer","TitleContainer","TitleText","h2","FlagTitle","title","defaultProps","FlagContainer","Flag","AppContainer","App","className","Subtitle","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6ZAEeA,kBAAf,K,eCAMC,EAAYC,OAAOC,KAAKC,KAEf,aACb,IAAMC,EAAWJ,EAAUK,KAAKC,MAAMD,KAAKE,SAAWP,EAAUQ,SAChE,OAAOC,YAAU,CAAEC,KAAMN,EAAUO,QAAS,M,otBCF9C,IAAMC,EAAW,WAAWC,MAAM,IAE5BC,EAAYC,IAAOC,IAAV,KAaTC,EAAWF,IAAOC,IAAV,KAKRE,EAAaH,IAAOI,KAAV,KACL,SAACC,GAAD,OAAWA,EAAMC,SAItBC,EAAcP,IAAOI,KAAV,KA6BFI,EArBF,kBACX,kBAACT,EAAD,KACE,kBAACG,EAAD,KACCL,EAASY,KAAI,SAACC,EAAQC,GACrB,IAAML,EAAQlB,IAAMwB,eAAeD,GACnC,OACE,kBAACR,EAAD,CACEU,IAAKP,EAAQK,EACbL,MAAOA,GAENI,OAKP,kBAACH,EAAD,4C,mMC/CJ,IAAMR,EAAYC,IAAOC,IAAV,KAGC,SAAAI,GAAK,OAAIA,EAAMS,cAqBhBC,EAfG,WAAO,IAAD,EACIC,mBAASC,KADb,mBACdtB,EADc,KACRuB,EADQ,KAQtB,OALAC,qBAAU,WACR,IAAMC,EAAaC,OAAOC,aAAY,kBAAMJ,EAAQD,OAAe,KACnE,OAAO,kBAAMI,OAAOE,cAAcH,OAIlC,kBAAC,EAAD,CAAWN,WAAYnB,GACrB,kBAAC,EAAD,Q,6JCtBN,IAOe6B,EAPUxB,IAAOC,IAAV,K,gWCEtB,IAAMwB,EAAiBzB,IAAOC,IAAV,KAQdyB,EAAY1B,IAAO2B,GAAV,KAIJ,SAAAtB,GAAK,OAAIA,EAAMC,SAGpBsB,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOvB,EAAV,EAAUA,MAAV,OAChB,kBAACmB,EAAD,KACE,kBAACC,EAAD,CAAWpB,MAAOA,GACfuB,KAKPD,EAAUE,aAAe,CACvBxB,MAAO,WAQMsB,Q,6OC9Bf,IAAMG,EAAgB/B,IAAOC,IAAV,KAGH,SAAAI,GAAK,OAAIA,EAAMV,QAkBhBqC,EAVF,SAAC,GAAD,IAAGrC,EAAH,EAAGA,KAAH,OACX,kBAACoC,EAAD,CAAepC,KAAMD,YAAU,CAACC,UAC9B,kBAAC,EAAD,CAAWkC,MAAOlC,M,sHCVtB,IAAMsC,EAAejC,IAAOC,IAAV,KAkBHiC,MAbf,WACE,OACE,kBAACD,EAAD,CAAcE,UAAU,OACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACE,kBAACC,EAAD,CAAUP,MAAM,kBAAkBvB,MAAM,YAC1C,kBAAC,EAAD,KACGpB,OAAOC,KAAKC,KAAOqB,KAAI,SAAAd,GAAI,OAAI,kBAAC,EAAD,CAAMkB,IAAG,UAAKlB,EAAL,SAAkBA,KAAMA,UCTrD0C,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cc51c95d.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n\n  body {\n    margin: 0;\n    font-family: 'Roboto', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n","import { buildFlag, flags } from 'lgbtq.js';\n\nconst flagNames = Object.keys(flags);\n\nexport default () => {\n  const flagName = flagNames[Math.floor(Math.random() * flagNames.length)]\n  return buildFlag({ flag: flagName, opacity: 0.7});\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { flags } from 'lgbtq.js';\n\nconst logoText = 'lgbtq.js'.split('');\n\nconst Container = styled.div`\n  width: 250px;\n  height: 200px;\n  padding-left: 20px;\n  padding-right: 20px;\n  background-color: #333333;\n  border-radius: 5pt;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nconst LogoText = styled.div`\n  font-family: 'Lobster', cursive;\n  font-size: 7em;\n`\n\nconst LogoLetter = styled.span`\n  color: ${(props) => props.color};\n  -webkit-text-stroke: 2px #EBEBEB;\n`\n\nconst LogoCaption = styled.span`\n  text-align: center;\n  width: 100%;\n  color: #EBEBEB;\n  font-weight: bold;\n  font-size: 1.1em;\n`\n\nconst Logo = () => (\n  <Container>\n    <LogoText>\n    {logoText.map((letter, index) => {\n      const color = flags.inclusivePride[index]\n      return (\n        <LogoLetter \n          key={color + index}\n          color={color}\n        >\n          {letter}\n        </LogoLetter>\n      )\n    })}\n    </LogoText>\n    <LogoCaption>\n      Colors and Gradients for web apps\n    </LogoCaption>\n  </Container>\n)\n\nexport default Logo\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport randomFlag from '../helpers/random-flag';\nimport Logo from './Logo';\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 50vh;\n  background: ${props => props.background};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst HeroImage = () => {\n  const [ flag, setFlag ] = useState(randomFlag());\n\n  useEffect(() => {\n    const changeFlag = window.setInterval(() => setFlag(randomFlag()), 10000)\n    return () => window.clearInterval(changeFlag);\n  })\n\n  return (\n    <Container background={flag}>\n      <Logo />\n    </Container>\n  )\n};\n\nexport default HeroImage;","import styled from 'styled-components';\n\nconst ContentContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: center;\n`\n\nexport default ContentContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst TitleContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst TitleText = styled.h2`\n  font-family: 'Lobster', cursive;\n  font-size: 3em;\n  -webkit-text-stroke: 1px #808080;\n  color: ${props => props.color};\n`;\n\nconst FlagTitle = ({ title, color }) => (\n  <TitleContainer>\n    <TitleText color={color}>\n      {title}\n    </TitleText>\n  </TitleContainer>\n);\n\nFlagTitle.defaultProps = {\n  color: '#000000'\n}\n\nFlagTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n  color: PropTypes.string,\n}\n\nexport default FlagTitle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport FlagTitle from './Subtitle';\nimport { buildFlag } from 'lgbtq.js';\n\nconst FlagContainer = styled.div`\n  width: 300px;\n  height: 200px;\n  background: ${props => props.flag};\n  border-radius: 10px;\n  margin: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Flag = ({ flag }) => (\n  <FlagContainer flag={buildFlag({flag})}>\n    <FlagTitle title={flag} />\n  </FlagContainer>\n);\n\nFlag.propTypes = {\n  flag: PropTypes.string.isRequired,\n}\n\nexport default Flag;\n","import React from 'react';\nimport styled from 'styled-components';\nimport GlobalStyle from './styles/global';\nimport HeroImage from './components/HeroImage';\nimport ContentContainer from './components/ContentContainer';\nimport Flag from './components/Flag';\nimport Subtitle from './components/Subtitle'\nimport { flags } from 'lgbtq.js';\n\nconst AppContainer = styled.div`\n  background-color: #333333;\n  width: 100vw;\n`;\n\nfunction App() {\n  return (\n    <AppContainer className=\"App\">\n      <GlobalStyle />\n      <HeroImage />\n        <Subtitle title=\"Available Flags\" color=\"#FFFFFF\" />\n      <ContentContainer>\n        {Object.keys(flags).map(flag => <Flag key={`${flag}-flag`} flag={flag} />)}\n      </ContentContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}